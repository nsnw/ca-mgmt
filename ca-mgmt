#!/bin/bash

#-------------------------------------------------------------------------------
# ca-mgmt
# A simple CA management tool
#
# (c) 2012 Andy Smith <andy@m0vkg.org.uk> / northstar networks
# https://github.com/m0vkg/ca-mgmt
# http://www.nsnw.co.uk/
#-------------------------------------------------------------------------------
# Inspired by Kees Leune's guide at http://www.leune.org/blog/kees/pages/ca.html
#-------------------------------------------------------------------------------
# ca-mgmt is released under the terms of the BSD 2-Clause license. A copy should
# be located in the same directory as this script, named LICENSE. Alternatively,
# a copy can be found at http://www.opensource.org/licenses/BSD-2-Clause.
#-------------------------------------------------------------------------------

NAME="ca-mgmt"
VERSION="0.3"
HEADER="${NAME} ${VERSION} (c) 2012 Andy Smith / northstar networks"
LOG=0
DEBUG=0
NOTICE=1
CERT_TYPES="site user"
CA_DIRS="key crt csr"
CA_FILES="index.txt serial"
OPENSSL="/usr/bin/openssl"
DIR_BASE="/home/andys/ca-mgmt"
CONFIG="${DIR_BASE}/root-ca/openssl.cnf"

FCRED="[31;1m"
FCGRN="[32;1m"
FCYLW="[33;1m"
FCBLU="[34;1m"
FCPRP="[35;1m"
FCCYN="[36;1m"
CLR="[0m"

function debug {
  if [ $# -eq 1 ]; then
    MSG=$1
    LMSG=$1
  else
    MSG="(${FCPRP}$1${CLR}) $2"
    LMSG="($1) $2"
  fi
  if [ ${DEBUG} -eq 1 ]; then
    echo "[${FCBLU}debug  ${CLR}] $MSG" >&2
  fi
  log debug "$LMSG"
}

function error {
  echo "[${FCRED}error  ${CLR}] $1" >&2
  #log err "$1"
  log error "$1"
}

function warning {
  echo "[${FCYLW}warning${CLR}] $1" >&2
  #log warn "$1"
  log warn "$1"
}

function notice {
  if [ ${NOTICE} -eq 1 ]; then
    echo "[${FCGRN}notice ${CLR}] $1" >&2
  fi
  log notice "$1"
}

function log {
  pri=$2
  msg=$3
  if [ ${LOG} -eq 1 ]; then
    ${LOGGER} -t ${NAME} -p ${pri} "${msg}"
  fi
}

function show_help {
  echo ${HEADER}
  echo "Manage SSL CA for users and sites."
  echo ""
  echo "COMMANDS"
  echo -e "\t-i\t\tInitialise CA"
  echo -e "\t-x\t\tDelete CA [${FCRED}DANGEROUS${CLR}]"
  echo -e "\t-c <cn>\t\tCreate certificate signing request for <cn>"
  echo -e "\t-s <cn>\t\tSign certificate request for <cn>"
  echo ""
  echo "OPTIONS"
  echo -e "\t-t <type>\tCertificate type (site, user) [MANDATORY for -c and -s]"
  echo -e "\t-k <size>\tKey size (default: 4096)"
  echo -e "\t-l <days>\tCertificate validity (default: 3650)"
  echo -e "\t-d\t\tTurn on debugging"
  echo ""
  echo "INITIALISATION OPTIONS"
  echo -e "\t-f <file>\tUse existing file <file> for openssl.cnf"
  echo -e "\t-1\t\tSet organisation name"
  echo -e "\t-2\t\tSet town/city"
  echo -e "\t-3\t\tSet county/state/province"
  echo -e "\t-4\t\tSet country"
  echo -e "\t-5\t\tSet organisational unit"
  echo -e "\t-6\t\tSet e-mail"
}

if [ -z "$*" ]; then
  show_help
  exit 1
fi

function call_openssl {
  if [ ! -z "$1" ]; then
    OPTIONS="$1"
    debug ${FUNCNAME} "openssl: called with ${FCCYN}${OPTIONS}${CLR}."
    ${OPENSSL} ${OPTIONS} -config ${CONFIG}
    ERR=$?

    return ${ERR}
  fi
}

CERT_TYPE=""
CMD_TYPE=""
COMMON_NAME=""
KEY_SIZE="4096"
LENGTH="3650"
IMPORTED_CONFIG_FILE=""

S_ORGNAME="Example Organisation"
S_LOCALITY="Somewhere"
S_COUNTY="Someplace"
S_COUNTRY="GB"
S_ORGUNIT="Network Operations"
S_EMAIL="support@example.com"

while getopts "g:xit:c:s:r:d1:2:3:4:5:6:k:l:hf:" opt; do
  case ${opt} in
    d)
      DEBUG=1
      ;;
    t)
      debug ${FUNCNAME} "Option ${FCGRN}-t${CLR} specified (certificate type)."
      if [ -z "${OPTARG}" ]; then
        error "Missing certificate type."
        exit 1
      fi
      CERT_TYPE=${OPTARG}
      if [ ${CERT_TYPE} != "site" ] && [ ${CERT_TYPE} != "user" ]; then
        error "Certificate must be of type ${FCYLW}user${CLR} or ${FCYLW}site${CLR}."
        exit 1
      else
        debug ${FUNCNAME} "Certificate type is ${FCGRN}${CERT_TYPE}${CLR}."
      fi
      ;;
    c)
      debug ${FUNCNAME} "Doing certificate signing request."
      if [ -z "${OPTARG}" ]; then
        error "No common name given."
        exit 1
      else
        debug "Common name is ${FCCYN}${OPTARG}${CLR}."
        COMMON_NAME=${OPTARG}
        CMD_TYPE="request"
      fi
      ;;
    s)
      debug ${FUNCNAME} "Doing certificate signing."
      if [ -z "${OPTARG}" ]; then
        error "No common name given."
        exit 1
      else
        debug "Common name is ${FCCYN}${OPTARG}${CLR}."
        COMMON_NAME=${OPTARG}
        CMD_TYPE="sign"
      fi
      ;;
    g)
      debug ${FUNCNAME} "Generating roots."
      if [[ "${OPTARG}" = "yes" ]]; then
        CMD_TYPE="generate_roots"
      fi
      ;;
    f)
      debug "Importing config file (${FCCYN}${OPTARG}${CLR})."
      IMPORTED_CONFIG_FILE=${OPTARG}
      ;;
    i)
      debug ${FUNCNAME} "Initialising CA."
      CMD_TYPE="init"
      ;;
    x)
      debug ${FUNCNAME} "Deleting CA."
      CMD_TYPE="delete"
      ;;
    1)
      debug "Organisation name set to ${FCCYN}${OPTARG}${CLR}."
      S_ORGNAME=${OPTARG}
      ;;
    2)
      debug "Locality set to ${FCCYN}${OPTARG}${CLR}."
      S_LOCALITY=${OPTARG}
      ;;
    3)
      debug "State/county/province set to ${FCCYN}${OPTARG}${CLR}."
      S_COUNTY=${OPTARG}
      ;;
    4)
      debug "Country set to ${FCCYN}${OPTARG}${CLR}."
      S_COUNTRY=${OPTARG}
      ;;
    5)
      debug "Organisational unit set to ${FCCYN}${OPTARG}${CLR}."
      S_ORGUNIT=${OPTARG}
      ;;
    6)
      debug "Email set to ${FCCYN}${OPTARG}${CLR}."
      S_EMAIL=${OPTARG}
      ;;
    k)
      debug "Key size set to ${FCCYN}${OPTARG}${CLR} (default is ${FCCYN}${KEY_SIZE}${CLR})."
      KEY_SIZE=${OPTARG}
      ;;
    l)
      debug "Length set to ${FCCYN}${OPTARG}${CLR} (default is ${FCCYN}${KEY_SIZE}${CLR})."
      LENGTH=${OPTARG}
      ;;
    h)
      show_help
      exit 0
      ;;
    *)
      error "Unknown command."
      exit 1
      ;;
  esac
done

function init_ca {
  debug "Initialising CA..."

  check_dirs
  RC=$?
  if [ ${RC} -eq 0 ]; then
    error "CA is already initialised. You can delete the CA with ${FCGRN}-x${CLR}."
    return 1
  elif [ ${RC} -eq 255 ]; then
    error "Internal error checking for directories."
    return 255
  else
    debug "Directories do not exist."
  fi

  if [ -d ${DIR_BASE} ]; then
    debug "${FCCYN}${DIR_BASE} exists."
    debug "Creating CA directories..."
    OUTPUT=`mkdir -p ${DIR_BASE}/{root,site,user}-ca/{crt,key,csr,crl} 2>&1`
    RC=$?
    if [ ${RC} -ne 0 ]; then
      error "Error initialising CA directories: Error code ${FCCYN}${RC}${CLR} (${FCCYN}${OUTPUT}${CLR})."
      exit 255
    fi
    debug "CA directories initialised."
    debug "Creating certificate index and serial files..."
    OUTPUT=`touch ${DIR_BASE}/{root,site,user}-ca/index.txt 2>&1`
    RC=$?
    if [ ${RC} -ne 0 ]; then
      error "Error initialising ${FCCYN}index.txt${CLR}: Error code ${FCCYN}${RC}${CLR} (${FCCYN}${OUTPUT}${CLR})."
      exit 255
    fi
    OUTPUT=`( for i in ${DIR_BASE}/{root,site,user}-ca/; do echo echo '100001' > $i/serial; done ) 2>&1`
    RC=$?
    if [ ${RC} -ne 0 ]; then
      error "Error initialising ${FCCYN}serial${CLR}: Error code ${FCCYN}${RC}${CLR} (${FCCYN}${OUTPUT}${CLR})."
      return 255
    fi
    notice "Certificate index and serial files initialised."
    debug "Creating ${FCCYN}openssl.cnf${CLR}..."
    create_openssl_cnf
    RC=$?
    if [ ${RC} -ne 0 ]; then
      error "Error initialising ${FCCYN}${DIR_BASE}/root-ca/openssl.cnf${CLR}: Error code ${FCCYN}${RC}${CLR}."
      return 255
    fi
    debug "${FCCYN}openssl.cnf${CLR} created."
    generate_roots
    RC=$?
    if [ ${RC} -ne 0 ]; then
      error "Error generating CA root certificates and keys."
      exit ${RC}
    fi
  else
    error "Base directory ${FCCYN}${DIR_BASE}${CLR} does not exist."
    return 1
  fi
}

function generate_roots {
    debug "Generating new root certificate and key..."
    notice "You'll now be prompted for organisation details and importantly"
    notice "a passphrase for the ${FCRED}root${CLR} CA's key."
    call_openssl "req -new -x509 -out ${DIR_BASE}/root-ca/crt/ca.crt -newkey rsa:${KEY_SIZE} -keyout ${DIR_BASE}/root-ca/key/ca.key -days ${LENGTH} -extensions v3_ca"
    if [ $? -ne 0 ]; then
      error "Error generating root certificate and key."
      return 255
    fi
    debug "Root certificate and key generated."
    debug "`ls -la ${DIR_BASE}/root-ca/crt/ca.crt`"
    debug "`ls -la ${DIR_BASE}/root-ca/key/ca.key`"
    debug "Generating ${FCCYN}site${CLR} certificate and key..."
    notice "For the ${FCGRN}site${CLR} (as with the ${FCRED}root${CLR} CA),"
    notice "you'll again be prompted for details and another passphrase."
    call_openssl "req -new -out ${DIR_BASE}/site-ca/csr/ca.csr -newkey rsa:${KEY_SIZE} -keyout ${DIR_BASE}/site-ca/key/ca.key -days ${LENGTH} -extensions v3_ca"
    if [ $? -ne 0 ]; then
      error "Error generating ${FCCYN}site${CLR} certificate and key."
      return 255
    fi
    debug "Site certificate and key generated."
    debug `ls -la ${DIR_BASE}/site-ca/csr/ca.csr`
    debug `ls -la ${DIR_BASE}/site-ca/key/ca.key`
    debug "Signing ${FCCYN}site${CLR} certificate with root certificate..."
    notice "Now you'll be prompted for the ${FCRED}root${CLR} CA key's passphrase for signing"
    notice "the ${FCGRN}site${CLR} CA's certificate request."
    cd ${DIR_BASE}/root-ca
    call_openssl "ca -days ${LENGTH} -extensions v3_ca -keyfile key/ca.key -cert crt/ca.crt -out ${DIR_BASE}/site-ca/crt/ca.crt -in ${DIR_BASE}/site-ca/csr/ca.csr"
    if [ $? -ne 0 ]; then
      error "Error signing ${FCCYN}site${CLR} certificate and key."
      return 255
    fi
    debug "Site certificate signed."
    debug "`ls -la ${DIR_BASE}/site-ca/crt/ca.crt`"

    debug "Generating ${FCCYN}user${CLR} certificate and key..."
    notice "For the ${FCGRN}user${CLR} (as with the ${FCRED}root${CLR} CA),"
    notice "you'll again be prompted for details and another passphrase."
    call_openssl "req -new -out ${DIR_BASE}/user-ca/csr/ca.csr -newkey rsa:${KEY_SIZE} -keyout ${DIR_BASE}/user-ca/key/ca.key -days ${LENGTH} -extensions v3_ca"
    if [ $? -ne 0 ]; then
      error "Error generating ${FCCYN}user${CLR} certificate and key."
      return 255
    fi
    debug "User certificate and key generated."
    debug "`ls -la ${DIR_BASE}/user-ca/csr/ca.csr`"
    debug "`ls -la ${DIR_BASE}/user-ca/key/ca.key`"
    debug "Signing ${FCCYN}user${CLR} certificate with root certificate..."
    notice "Now you'll be prompted for the ${FCRED}root${CLR} CA key's passphrase for signing"
    notice "the ${FCGRN}site${CLR} CA's certificate request."
    cd ${DIR_BASE}/root-ca
    call_openssl "ca -days ${LENGTH} -extensions v3_ca -keyfile key/ca.key -cert crt/ca.crt -out ${DIR_BASE}/user-ca/crt/ca.crt -in ${DIR_BASE}/user-ca/csr/ca.csr"
    if [ $? -ne 0 ]; then
      error "Error signing ${FCCYN}user${CLR} certificate and key."
      return 255
    fi
    debug "User certificate signed."
    debug "`ls -la ${DIR_BASE}/user-ca/crt/ca.crt`"
    notice "CA certificate and key generation complete."
    return 0
}

function delete_ca {
  debug "Deleting CA..."

  check_dirs
  RC=$?
  if [ ${RC} -eq 1 ]; then
    error "No certificate directories found."
    return 1
  elif [ ${RC} -eq 255 ]; then
    error "Internal error checking for directories."
    return 255
  else
    debug "Certificate directories found."
  fi

  warning "THIS WILL DELETE THE ROOT, SITE AND USER CA CERTIFICATES AND KEYS."
  warning "YOU WILL NO LONGER BE ABLE TO SIGN OR VERIFY CERTIFICATES."
  warning "To accept this, please type 'ok':-"
  echo -n "> "
  read OK
  if [[ "${OK}" != "ok" ]]; then
    notice "Aborted CA deletion."
    exit 0
  else
    OUTPUT=`rm -rf ${DIR_BASE}/{root,site,user}-ca 2>&1`
    RC=$?
    if  [ ${RC} -ne 0 ]; then
      error "Error removing certificate directories: Error code ${FCCYN}${RC}${CLR} (${FCCYN}${OUTPUT}${CLR})."
      return 255
    fi
    notice "Certificate directories removed."
    exit 0
  fi
}

# Check for directories
function check_dirs {
  for CRT_TYPE in root ${CERT_TYPES}; do
    debug "Checking ${FCCYN}${CRT_TYPE}${CLR} directories..."
    for CA_DIR in ${CA_DIRS}; do
      if [ ! -d ${DIR_BASE}/${CRT_TYPE}-ca/${CA_DIR} ]; then
        warning "Missing directory ${FCCYN}${DIR_BASE}/${CRT_TYPE}-ca/${CA_DIR}${CLR}"
        return 1
      else
        debug "${FCCYN}${DIR_BASE}/${CRT_TYPE}-ca/${CA_DIR}${CLR} exists."
      fi
    done
  done
  return 0
}

function create_openssl_cnf {

  if [ ! -z "${IMPORTED_CONFIG_FILE}" ]; then
    notice "Using config file ${IMPORTED_CONFIG_FILE} for openssl.cnf."
    cp ${IMPORTED_CONFIG_FILE} ${DIR_BASE}/root-ca/openssl.cnf
  else
    
    notice "The following details will be used for generating ${FCGRN}openssl.cnf${CLR}:-"
    notice "Organisation: ${FCGRN}$S_ORGNAME${CLR}"
    notice "Unit        : ${FCGRN}$S_ORGUNIT${CLR}"
    notice "Email       : ${FCGRN}$S_EMAIL${CLR}"
    notice "Town/city   : ${FCGRN}$S_LOCALITY${CLR}"
    notice "County      : ${FCGRN}$S_COUNTY${CLR}"
    notice "Country     : ${FCGRN}$S_COUNTRY${CLR}"
    notice "To change these, please use the ${FCGRN}-1${CLR}, ${FCGRN}-2${CLR}, ${FCGRN}-3${CLR}, ${FCGRN}-4${CLR}, ${FCGRN}-5${CLR} and ${FCGRN}-6${CLR} options."

    echo "
dir                                         = .
[ ca ]
default_ca                                  = CA_default

[ CA_default ]
serial                                      = \$dir/serial
database                                    = \$dir/index.txt
new_certs_dir                               = \$dir/crt
certificate                                 = \$dir/crt/ca.crt
private_key                                 = \$dir/key/ca.key
crl_dir                                     = \$dir/crl
crl                                         = \$dir/crl/crl.pem
default_crl_days                            = 30
default_days                                = ${LENGTH}
default_md                                  = md5
preserve                                    = no
email_in_dn                                 = no
nameopt                                     = default_ca
certopt                                     = default_ca
policy                                      = policy_match

[ policy_match ]
countryName                                 = match
stateOrProvinceName                         = match
organizationName                            = match
organizationalUnitName                      = optional
commonName                                  = supplied
emailAddress                                = optional

[ req ]
default_bits                                = ${KEY_SIZE}
default_keyfile                             = key.pem
default_md                                  = md5
string_mask                                 = nombstr
distinguished_name                           = req_distinguished_name
req_extensions                              = v3_req

[ req_distinguished_name ]
0.organizationName                          = Organisation name (company)
organizationalUnitName                      = Organisational unit name (department, division, etc.)
emailAddress                                = E-mail address
emailAddress_max                            = 40
localityName                                = Locality name (town/city)
stateOrProvinceName                         = County, state, province
countryName                                 = 2 letter country code
countryName_min                             = 2
countryName_max                             = 2
commonName                                  = Common name (hostname, IP address, or your name)
commonName_max                              = 64

0.organizationName_default                  = $S_ORGNAME
localityName_default                        = $S_LOCALITY
stateOrProvinceName_default                 = $S_COUNTY
countryName_default                         = $S_COUNTRY
organizationalUnitName_default              = $S_ORGUNIT
emailAddress_default                        = $S_EMAIL

[ v3_ca ]
basicConstraints                            = CA:TRUE
subjectKeyIdentifier                        = hash
authorityKeyIdentifier                      = keyid:always,issuer:always

[ v3_site_ca ]
basicConstraints                            = CA:TRUE
subjectKeyIdentifier                        = hash
authorityKeyIdentifier                      = keyid:always,issuer:always

[ v3_user_ca ]
basicConstraints                            = CA:TRUE
subjectKeyIdentifier                        = hash
authorityKeyIdentifier                      = keyid:always,issuer:always

[ v3_req ]
basicConstraints                            = CA:FALSE
subjectKeyIdentifier                        = hash
    " > ${DIR_BASE}/root-ca/openssl.cnf
  fi
  RC=$?
  if [ ${RC} -ne 0 ]; then
    error "Error creating ${FCCYN}${DIR_BASE}/root-ca/openssl.cnf${CLR}: Error code ${FCCYN}${RC}${CLR}."
    return 255
  fi
  return 0
}

case ${CMD_TYPE} in
  init)
    init_ca
    RC=$?
    if [ ${RC} -eq 255 ]; then
      error "Internal error while initialising CA."
      exit 255
    elif [ ${RC} -eq 1 ]; then
      error "CA is already initialised."
      exit 1
    else
      notice "CA initialised."
      exit 0
    fi
    ;;
  delete)
    delete_ca
    RC=$?
    if [ ${RC} -eq 255 ]; then
      error "Internal error while deleting CA."
      exit 255
    elif [ ${RC} -eq 1 ]; then
      error "CA not found."
      exit 1
    else
      notice "CA deleted."
      exit 0
    fi
    ;;
  request)
    check_dirs
    if [ $? -eq 1 ]; then
      error "CA directories not found. Perhaps you need to initialise them with ${FCGRN}-i${CLR}?"
      exit 1
    fi
    if [ -z "${CERT_TYPE}" ]; then
      error "Certificate type not set (use ${FCGRN}-t${CLR})"
      exit 1
    fi
    debug "Changing directory to ${FCCYN}${DIR_BASE}/${CERT_TYPE}-ca${CLR}..."
    cd ${DIR_BASE}/${CERT_TYPE}-ca
    notice "Generating certificate signing request for ${FCYLW}${COMMON_NAME}${CLR}..."
    call_openssl "req -newkey rsa:${KEY_SIZE} -keyout key/${COMMON_NAME}.key -out csr/${COMMON_NAME}.csr -days ${LENGTH} -nodes"
    RC=$?
    if [ ${RC} -ne 0 ]; then
      error "Error creating certificate signing request for ${FCYLW}${COMMON_NAME}${CLR}: Error code ${FCCYN}${RC}${CLR}."
      exit ${RC}
    else
      notice "Certificate signing request for ${FCYLW}${COMMON_NAME}${CLR} successful."
      notice "CSR is ${FCCYN}${DIR_BASE}/${CERT_TYPE}-ca/csr/${COMMON_NAME}.csr${CLR}."
      notice "Key is ${FCCYN}${DIR_BASE}/${CERT_TYPE}-ca/key/${COMMON_NAME}.key${CLR}."
      ls -la ${DIR_BASE}/${CERT_TYPE}-ca/csr/${COMMON_NAME}.csr
      ls -la ${DIR_BASE}/${CERT_TYPE}-ca/key/${COMMON_NAME}.key
    fi
    ;;
  sign)
    check_dirs
    if [ $? -eq 1 ]; then
      error "CA directories not found. Perhaps you need to initialise them with ${FCGRN}-i${CLR}?"
      exit 1
    fi
    debug "Changing directory to ${FCCYN}${DIR_BASE}/${CERT_TYPE}-ca${CLR}..."
    cd ${DIR_BASE}/${CERT_TYPE}-ca
    call_openssl "ca -extensions v3_${CERT_TYPE}_ca -days ${LENGTH} -keyfile key/ca.key -cert crt/ca.crt -in csr/${COMMON_NAME}.csr -out crt/${COMMON_NAME}.crt"
    ;;
  generate_roots)
    generate_roots
    ;;
esac
